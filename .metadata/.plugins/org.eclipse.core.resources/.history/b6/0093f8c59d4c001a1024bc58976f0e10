//============================================================================
// Name        : 04Graph.cpp
// Author      : Sanchit Raina
// Version     :
// Copyright   : https://github.com/Sanchitraina1999/ADSL/blob/master/04Graph/src/04Graph.cpp
// Description : Hello World in C++, Ansi-style
//============================================================================

/*

 	There are flight paths between cities. If there is a flight between city
	A and city B then there is an edge between the cities. The cost of the
	edge can be the time that flight takes to reach city B from A, or the
	amount of fuel used for the journey. Represent this as a graph. The
	node can be represented by airport name or name of the city. Use
	adjacency list representation of the graph. (Operation to be
	performed adding and deleting edge, adding and deleting vertices,
	calculated in-degree and out-degree for directed graph. Use any
	traversal to traverse graph)

 */

#include <iostream>
#include <vector>
#include<list>
#include<iterator>
#define total 10
using namespace std;

class node{
public:
	string cityname;
	friend class graph;
};

class graph:public node{
	int cities;
	vector<string> city;
public:
	graph();
	void addRoute();
	void deleteRoute();
	void addCity();
	void deleteCity();
	void degree();
	void traversal();
};

graph::graph(){
	cities=0;
	cout<<"Initialize cities\n";
	cout<<"How many cities?\n";
	int cities;
	cin>>cities;
	string take;
	for(int i=0;i<cities;i++){
		cout<<"\nEnter the name of the city"<<i+1<<": ";
		cin>>take;
		city.push_back(take);
	}
	/*list for N cities*/
	list<int> adj_list[cities];
}

void graph::addRoute(){
	cout<<"The cities are:\n";
	for(int i=0;i<cities;i++){
		cout<<city[i]<<" ";
	}
	cout<<endl;



}

void graph::deleteRoute(){

}

void graph::addCity(){

}

void graph::deleteCity(){

}

void graph::degree(){

}

void graph::traversal(){

}


int main() {
	graph g;
up:
	cout<<"Country FLIGHT MECHANISM\n";
	cout<<"1. ADD a Route\n";
	cout<<"2. DELETE a Route\n";
	cout<<"3. ADDING a city\n";
	cout<<"4. DELETING a city\n";
	cout<<"5. Indegree and Outdegree for directed graph\n";
	cout<<"6. Traversal";
	int choice;	cin>>choice;
	switch(choice){
	case 1:
		g.addRoute();
		break;
	case 2:
		g.deleteRoute();
		break;
	case 3:
		g.addCity();
		break;
	case 4:
		g.deleteCity();
		break;
	case 5:
		g.degree();
		break;
	case 6:
		g.traversal();
		break;
	case 7:
		cout<<"Not a valid choice\n";
	}
	cout<<"Do you want to continue(y/n)?: ";
	char yn;
	if(yn=='y' || yn=='Y')
		goto up;
	return 0;
}
