//============================================================================
// Name        : 07Chaining.cpp
// Author      : Sanchit Raina
// Version     :
// Copyright   : https://www.github.com/Sanchitraina1999/ADSL
// Description : Hello World in C++, Ansi-style
//============================================================================

/*

The symbol table is generated by compiler. From this perspective,
the symbol table is a set of name-attribute pairs. In a symbol table
for a compiler, the name is an identifier, and the attributes might
include an initial value and a list of lines that use the identifier.
Perform the following operations on symbol table:
a) Determine if a particular name is in the table
b) Retrieve the attributes of that name
c) Modify the attributes of that name
d) Insert a new name and its attributes
e) Delete a name and its attributes
(Use chaining with replacement and without replacement)

 */

#include<iostream>
using namespace std;

class node{
	string key,type,ival;
	int chain;
public:
	friend class HashTable;
};

class HashTable{
	node* HT;
	int n;
public:
	HashTable(int d);
	void create();
	void withoutinsert(node);
	void withinsert(node);
	void find();
	void del();
	void modify();
};

HashTable::HashTable(int d){
	n=d;
	HT=new node[n];
	for(int i=0;i<n;i++){
		HT[i].key="#";
		HT[i].chain=-1;
	}
}

void HashTable::modify(){
	string k,newival;
	int u,v;

	cout<<"\nEnter key of element to be modified";
	cin>>k;
	cout<<"\nEnter new initial value";
	cin>>newival;

	int l=k.length()%n;

	if(HT[l].key==k){
		HT[l].ival = newival;
	}
	else{
		v = l;
		u = HT[v].chain;
		while(u!=-1 && HT[v].key!=k){
			v = u;
			u = HT[v].chain;
		}
		if(HT[v].key==k)
			HT[v].ival = newival;
		else
			cout<<"\nEntry does not exist !";
	}
}

void HashTable::del(){
	string k;
	int v,u;

	cout<<"\nEnter key of the element of be deleted";
	cin>>k;

	int l = k.length()%n;

	if(HT[l].key==k){
		HT[l].key=="#";
		HT[l].type=" ";
		HT[l].ival=" ";
		cout<<"\nDeleted Successfully";
	}
	else{
		v = l;
		u = HT[v].chain;
		while(u!=-1 && HT[v].key!=k){
			v = u;
			u = HT[v].chain;
		}
		if(HT[v].key==k){
			HT[v].key="#";
			HT[v].type=" ";
			HT[v].ival=" ";
			cout<<"\nDeleted Successfully";
		}
		else
			cout<<"\nEntry does not exist";
	}
}

void HashTable::find(){
	string k;
	int v,u;

	cout<<"\nEnter key of the element to be found";
	cin>>k;

	int l = HT[l].chain;
	while(u!=-1 && HT[v].key!=k){
		v = u;
		u=HT[v].chain;
	}
	if(HT[v].key==k)
		cout<<"\nFound : "<<HT[v].key<<" "<<HT[v].type<<" "<<HT[v].ival;
	else
		cout<<"\nNot Found";
}

void HashTable::withinsert(node nn){
	int l = nn.key.length()%n;
	if(HT[l].key=="#"){
		HT[l]=nn;
		HT[l].chain=-1;
	}
	else{
		if(HT[l].key.length()%n==l){
			int v,u;
			v=l;
			u=HT[l].chain=-1;

			while(u!=-1){
				v=u;
				v=HT[l].chain;
			}
				int i;
				for(i=(l+1)%n;HT[i].key!="#";i=(i+1)%n);
				HT[i]=nn;
				HT[v].chain=i;
				HT[i].chain=-1;
		}
		else{
			node temp;
			temp = HT[l];
			HT[l]=nn;
			HT[l].chain=-1;
			int i;
			for(i=(l+1)%n;HT[i].key!="#";i=(i+1)%n);
			HT[i]=temp;

			int k;
			for(k=0;HT[k].chain!=l;k=(k+1)%n);
			HT[k].chain=i;
			HT[i].chain=-1;
		}
	}
	for(int i=0;i<n;i++)
		cout<<"\n"<<HT[i].key<<"\t"<<HT[i].chain;
}

void HashTable::withoutinsert(node nn){
	int v,u;
	int l = nn.key.length()%n;
	if(HT[l].key=="#"){
		HT[l] = nn;
		HT[l].chain=-1;
	}
	else{
		v = l;
		u = HT[v].chain;

		while(u!=-1){
			v=u;
			u=HT[l].chain;
		}
		int i;
		for(i=(l+1)%n;HT[i].key!="#";i=(i+1)%n);
		HT[i]=nn;
		HT[v].chain=i;
		HT[i].chain=-1;
	}

	for(int i=0;i<n;i++)
		cout<<"\n"<<HT[i].key<<"\t"<<HT[i].chain;
}

void HashTable::create(){
	int ch;
	cout<<"\nEnter the type of Linear Probing: ";
	cout<<"\n1. Without Replacement";
	cout<<"\n2. With Replacement";
	cin>>ch;

	for(int i=0;i<n;i++){
		node nn;
		cout<<"\n"<<i+1<<" Entry : ";
		cout<<"\nEnter Identifier(symbol) Name:";
		cin>>nn.key;
		cout<<"\nEnter data type: ";
		cin>>nn.type;
		cout<<"\nEnter initial value: ";
		cin>>nn.ival;

		if(ch==1)
			withoutinsert(nn);
		else
			withinsert(nn);
	}
}

int main(){
	int n;
	cout<<"\nEnter number of Identifiers(symbols) to be stored: ";
	cin>>n;
	HashTable obj(n);
	obj.create();
	do{
		cout<<"\nSELECT ONE OF THE FOLLOWING : ";
		cout<<"\n1. Retrieve";
		cout<<"\n2. Delete";
		cout<<"\n3. Modify";
		cout<<"\n4. Exit";
		cin>>n;
		if(n==1)
			obj.find();
		else if(n==2)
			obj.del();
		else if(n==3)
			obj.modify();

	}while(n!=4);
	return 0;
}
