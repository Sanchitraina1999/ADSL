//============================================================================
// Name        : 02BinarySearchTree.cpp
// Author      : Sanchit Raina
// Version     :
// Copyright   : https://github.com/Sanchitraina1999/ADSL/blob/master/02BinarySearchTree/src/02BinarySearchTree.cpp
// Description : Hello World in C++, Ansi-style
//============================================================================

/*
 A Dictionary stores keywords & its meanings. Provide facility for
adding new keywords, deleting keywords, updating values of any
entry, assign a given tree into another tree (=). Provide facility to
display whole data sorted in ascending/ Descending order. Also find
how many maximum comparisons may require for finding any
keyword. Use Binary Search Tree for implementation.
 */

#include <iostream>
#include<vector>
#include<string.h>
using namespace std;

class node{
	string key;
	vector<string> meanings;
	node *left, *right;
public:
	node(){
		left=right=NULL;
	}
	friend class BST;
};

class BST{
	node *root;
public:
	BST(){
		root=NULL;
	}
	void add();
	void deleteKeyword();
	void updatemeaning();
	void displayASC();
	void displayDESC();
	void copy();
	void comparisons();

	void inorderRecursive(node *);
	void RVLorderREcusive(node *);
	node* search(string);
	int searchwithcomparisons(string);
	node* parent(node*);

	friend class node;
};

void BST::add(){
		int n;
		string meaning;

		node *temp= new node(); //temp is the new node to be added to the tree
		cout<<"\nEnter keyword : ";
		cin>>temp->key;
		cout<<"\nNumbers of meanings you want to enter for "<<temp->key<<" key";
		cin>>n;
		cout<<"Enter "<<n<<" meanings";
		cout<<endl;
		while(n--){
			cout<<">>";
			cin>>meaning;
			temp->meanings.push_back(meaning);
		}

		if(root==NULL){
			root=temp;
			cout<<"\n"<<root->key<<" added as ROOT node of the Binary Search Tree";
		}
		else{
			node *temp1=root;       //temp1 is for primary root nodes at each level
			int flag=0;           //flag 0 implies new node has NOT YET been added
			while(flag==0){
				if(temp->key.compare(temp1->key)<0){     //s1.compare(s2) returns a value < 0 (s1 is smaller then s2)
					if(temp1->left==NULL){
						temp1->left=temp;
						cout<<"\n"<<temp->key<<" added to the left of "<<temp1->key;
						flag=1;
					}
					else{
						temp1=temp1->left;
					}
				}
				else if(temp->key.compare(temp1->key)>0){
					if(temp1->right==NULL){
						temp1->right=temp;
						cout<<"\n"<<temp->key<<" added to the right of "<<temp1->key;
						flag=1;
					}
					else{
						temp1=temp1->right;
					}
				}
				else
					cout<<"\n"<<temp->key<<" already exists in the dictionary";
			}
		}
}

void BST::displayASC(){
	if(root)
		inorderRecursive(root);
	else
		cout<<"\nDictionary has no keywords";
}

void BST::inorderRecursive(node* root){
	if(root){
		inorderRecursive(root->left);
			cout<<root->key<<" :>> ";
			for(unsigned int i=0;i<root->meanings.size();i++)
				cout<<root->meanings[i]<<" ";
			cout<<endl;
		inorderRecursive(root->right);
	}
}

void BST::displayDESC(){
	if(root)
		RVLorderREcusive(root);
	else
		cout<<"\nDictionary has no keywords";
}

void BST::RVLorderREcusive(node *root){
	if(root){
		RVLorderREcusive(root->right);
			cout<<root->key<<" :>> ";
			for(unsigned int i=0;i<root->meanings.size();i++)
				cout<<root->meanings[i]<<" ";
			cout<<endl;
		RVLorderREcusive(root->left);
	}
}

void BST::updatemeaning(){
	char choice='y';
	string keyword,meaningChange,changed;
	cout<<"\nEnter the keyword for which you want to update the meanings";
	cin>>keyword;
	node* temp = search(keyword);
	if(temp){
		cout<<temp->meanings.size()<<" meanings exist for keyword: "<<keyword<<" , they are as follows: "<<endl;
		for(int i=0;i<temp->meanings.size();i++){
			cout<<temp->meanings[i]<<" ";
			cout<<"\n";
		}
		while(choice=='y'){
			int found=0;
			cout<<"\nMeaning you want to change: ";
			cin>>meaningChange;
			cout<<"\nWhat do you want "<<meaningChange<<" to change with ?: ";
			cin>>changed;
			for(int i=0;i<temp->meanings.size();i++){
				if(temp->meanings[i].compare(meaningChange)==0){
					cout<<"\n "<<temp->meanings[i]<<" successfully changed to ";
					temp->meanings[i]=changed;
					cout<<temp->meanings[i];
					found=1;
				}
			}
			if(found==0)
				cout<<"No such meaning ("<<meaningChange<<") exists for keyword "<<keyword<<" in the dictionary";
			else{
				cout<<"\nThe dictionary is updated as : "<<endl;
				displayASC();
			}
			cout<<"\nDo you want to change more meanings of the keyword "<<keyword<<" ?: ";
			cin>>choice;
		}
	}
	else{
			cout<<"\n"<<keyword	<<" keyword not found in the dictionary";
		}
}

node* BST::search(string keyword){
	int found=0;
	while(found==0){
		if (root->key.compare(keyword) < 0){
			if(root->right!=NULL)
				root = root->right;
			else
				return NULL;
		}
		else if (root->key.compare(keyword) > 0){
			if(root->left!=NULL)
				root = root->left;
			else
				return NULL;
		}
		else{
			found = 1;
			return root;
		}
	}
}

node* BST::parent(node* temp){
	int look=0;
	node* temp_root=root;
	if(temp==root)
		return NULL;
	while(look==0){
		if(temp->key.compare(temp_root->key)>0){
			if(temp_root->right->key==temp->key || temp_root->left->key==temp->key)
				return temp_root;
			temp_root=temp_root->right;
		}
		if(temp->key.compare(temp_root->key)<0){
			if(temp_root->right->key==temp->key || temp_root->left->key==temp->key)
				return temp_root;
			temp_root=temp_root->left;
		}
	}
}

void BST::deleteKeyword(){
	cout<<"\nDictionary is as follows:"<<endl;
	displayASC();
	string keyword;
	cout<<"\nEnter the keyword you want to delete from the dictionary: ";
	cin>>keyword;
	node *found=search(keyword);
	node *founds_parent=parent(found);
	if(found){
		if(found->left==NULL && found->right==NULL){          //FOUND is LEAF node
			cout<<"\nThe keyword "<<keyword<<" is present as leaf node in the Dictionary";
			if(founds_parent->right==found){
				founds_parent->right=NULL;
				delete(found);
			}
			else if(founds_parent->left==found){
				founds_parent->left=NULL;
				delete(found);
			}
			cout<<"\nKeyword "<<keyword<<" deleted from the dictionary";
		}
		else if(found->right==NULL || found->left==NULL){ //FOUND has only 1 child node
			cout<<"\nThe keyword "<<keyword<<" has only one child node";
			if(found->right!=NULL){
				if(founds_parent->left==found){
					founds_parent->left=found->right;
					delete(found);
				}
				else if(founds_parent->right==found){
					founds_parent->right=found->right;
					delete(found);
				}
			}
			else if(found->left!=NULL){
				if(founds_parent->left==found){
					founds_parent->left=found->left;
					delete(found);
				}
				else if(founds_parent->right==found){
					founds_parent->right=found->left;
					delete(found);
				}
			}
			cout<<"\nKeyword "<<keyword<<" deleted from the dictionary";
		}
		else{                 //FOUND node has both left and right nodes present
			node* temp_node=found;
			temp_node=temp_node->right;
			while(temp_node->left!=NULL)
				temp_node=temp_node->left;
			swap(found->key,temp_node->key); //the node to be deleted from the tree is replaced with its inorder successor node
			/*Now, indirectly node we want to delete is TEMP_NODE's key that is now holding */

		}

		cout<<"\nThe dictionary is updated as : "<<endl;
		displayASC();
	}
	else{
		cout<<"\nKeyword ("<<keyword<<") is not the dictionary";
	}
}

void BST::copy(){

}

void BST::comparisons(){
	string keyword;
	int maxx;
	cout<<"\nEnter the keyword for which you want to calculate the maximum comparisons";
	cin>>keyword;
	maxx = searchwithcomparisons(keyword);
	cout<<"\nNumber of comparisons to find the keyword "<<keyword<<" in the dictionary are :"<<endl;
	cout<<maxx;
}

int BST::searchwithcomparisons(string keyword){
	int found=0,comparisons=0;
	while(found==0){
		if (root->key.compare(keyword) < 0){
			if(root->right!=NULL){
				root = root->right;
				comparisons++;
			}
			else
				return comparisons;
		}
		else if (root->key.compare(keyword) > 0){
			if(root->left!=NULL){
				root = root->left;
				comparisons++;
			}
			else
				return comparisons;
		}
		else{
			found = 1;
			return comparisons;
		}
	}
}

int main(){
	BST t;
	int choice;
	char stop='y';
	do{
		cout<<"\n MAIN MENU ";
		cout<<"\n 1. INSERT WORD with its MEANINGS";
		cout<<"\n 2. PRINT DICTIONARY(ascending)";
		cout<<"\n 3. PRINT DICTIONARY(descending)";
		cout<<"\n 4. UPDATE ";
		cout<<"\n 5. DELETE";
		cout<<"\n 6. COPY";
		cout<<"\n 7. MAX comparisons";
		cin>>choice;
		switch(choice){
		case 1:
			t.add();
			break;
		case 2:
			t.displayASC();
			break;
		case 3:
			t.displayDESC();
			break;
		case 4:
			t.updatemeaning();
			break;
		case 5:
			t.deleteKeyword();
			break;
		case 6:
			t.copy();
			break;
		case 7:
			t.comparisons();
			break;
		default:
			cout<<"\nYou have entered a wrong choice";
		}
		cout<<"\n\nDo you want to continue (y/n)";
		cin>>stop;
	}
	while(stop=='n' || stop=='N');
	return 0;
}



